#!/usr/bin/perl -w
use strict;
use warnings;
use Getopt::Std;


getopt('scpot');
our ($opt_s,$opt_c,$opt_p,$opt_o,$opt_t);

# like the shell getopt, "d:" means d takes an argument
print "\n\nParameter provided\n-sequence file: $opt_s\n" if defined $opt_s;
print "-Conversion file from clustalw: $opt_c\n" if defined $opt_c;
print "-Conversion table: $opt_t\n" if defined $opt_t;
print "-Pattern list: $opt_p\n" if defined $opt_p;
print "-print output as: $opt_o\n" if defined $opt_o;
print "Unprocessed by Getopt::Std:\n" if $ARGV[0];
foreach (@ARGV) {
  print "-- $_\n";
}



my $help="\n\nUsage options:- \n\nperl\tscript_name\t-s [file]\t-c or -t [file]\t-p [file]\t-o [filename]\n\n-s\tSequence file\n-c\tConversion file obtained from clustalw (OR)\n-t\tTable containing information for conversion in two columns\n\t(Col1:original name\tCol2: Converted Name)\n-p\tPattern list\n-o\tOutputfile\n\n";


print"\n\n\n\nThis script can read conversion table generated by clustalw (use option -c)or table (use option -t) \nand uses user provided list of names to look for sequences in aspecified database\n\n\n";
#############################################################################################
my (@wholefile,%new,%seq_hash,@pattern,$patternfile,$list,$seqfile,$outfile);

if(defined($opt_c)){$list=$opt_c; }
elsif(defined($opt_t)){$list=$opt_t;}
else{die"\nThere is no file defined as Conversion File/table\n$help";}

#$list=$opt_c if defined ($opt_c)or die"\nThere is no file defined as Conversion File/table\n$help";
#else{print "Enter Conversion file containing conversion list obtained from clustalw program\n"; $list=<STDIN>;}
#chomp ($list)if defined($list);

#$list=$opt_t if defined ($opt_t);
#else{print "Enter Conversion file containing conversion list obtained from clustalw program\n"; $list=<STDIN>;}
chomp ($list)if defined($list);

$seqfile=$opt_s if defined($opt_s)or die"\nThere is no file defined as sequence file\n$help";;
#else{print "Enter Sequence file containing sequences in FASTA format\n"; $seqfile=<STDIN>;}
chomp ($seqfile) if defined ($seqfile);

$patternfile=$opt_p if defined($opt_p)or die"\nThere is no file defined as pattern file\n$help";;
#else{print "Enter pattern file containing pattern seperated by newline\n"; $patternfile=<STDIN>;}
chomp ($patternfile);


$outfile=$opt_o if defined($opt_o)or die"\nThere is no file defined as output file\n$help";;
#else{print "Enter the name of out file to save selected sequences\n"; $outfile=<STDIN>;}
chomp ($outfile) if defined ($outfile);



############################################################################################
if(defined($opt_c)){
open (CODE,"$list") or die "Cannot find $list\n";

print "-----Generating conversion table-----\nOriginal Name\tConverted Name\n";
while(<CODE>){
	chomp $_;
	if(/^\s*$|^\D/){next;}
my	@line=split(/\s+/,$_);
my	$code=$line[3];
my	$realname=$line[1];
	$new{$code}= $realname;
	
	print "$new{$code}\t$code\n";
	

			}
}

if(defined($opt_t)){
open (CODE,"$list") or die "Cannot find $list\n";

print "-----Generating conversion table-----\nOriginal Name\tConverted Name\n";
while(<CODE>){
	chomp $_;
	if(/^\s*$/){next;}
my	@line=split(/\s+/,$_);
my	$code=$line[1];
my	$realname=$line[0];
	$new{$code}= $realname;
	
	print "$new{$code}\t$code\n";
	

			}
}



##############################################################################################
open SEQ,"$seqfile" or die "Cannot find $seqfile\n";
print "\n\nReading Fasta Sequences from:: $seqfile.....Plz wait...\n";
$/="\n>";

while(<SEQ>){#
    chomp;
   my ($header,@sequence)=split("\n",$_);
    
    $header=~s/>//;
    $header=~s/\s+$//;

    $header=~s/-start[\d]*.*$//;

 #S	print "$header\n";
    
    my $sequence= join("",@sequence);
    $sequence=~ s/\s//g;
    $sequence=~s/\n//g;
    $sequence=~s/-start[\d]*.*$//;

    $seq_hash{$header}=$sequence;

  			}#

my @seq_count=keys (%seq_hash);
my $seq_count=@seq_count;
my @test= keys(%seq_hash);
#@print "@test\n";
print "Done....\nNumber of sequences read form input file = $seq_count\n\n";
@seq_count=();




###############################################################################################
#make an array from the input patterns search. CHANGE THE PATTERN RECOGNITION HERE TO FIND SPECIAL KIND OF PATTERN
	open PATTERN,"$patternfile" or die "Cannot find pattern file $patternfile \n\n";
	print "\n\nReading pattern from pattern file....Plz wait...\n\n\nPatterns read....\n";
	$/="\n";
	while(<PATTERN>){
		chomp;
		if($_ eq /^\s*$/){next;};
		my$pattern=$_; 
		chomp($pattern); 
		#$pattern=~s/\s*//g;
		$pattern=~s/\s+$//g;
		print "$pattern\n";
		push (@pattern,$pattern);
		next;                
                }

      my $pat_number=@pattern;
print "\nNumber of patterns read: $pat_number\n\n\nConverting Code names to Original names and writing sequences in file: $outfile\n\n";
                


###############################################################################################
open OUT,">$outfile" or die "Cannot Open $outfile\n";
open OUT2,">$outfile.list" or die "Cannot Open $outfile\n";


foreach my$key(@pattern){
	print "Code Name: $key\t";
#	if($key eq /^\s*$|''/){next;}
	my $headerN= $new{$key};
	
	$headerN=~s/-start[\d]*.*$//;
	print "converted to:$headerN\t";
	print "Writing sequence in file\n" if defined ($seq_hash{$headerN}) ;
	print "Cannot find Match for: $key\n" if !defined ($seq_hash{$headerN});	
	print OUT">$headerN\n$seq_hash{$headerN}\n" if defined ($seq_hash{$headerN});
	print OUT2"$headerN\n";
						}
###############################################################################################						
close OUT;
close SEQ;
close PATTERN;
close CODE;